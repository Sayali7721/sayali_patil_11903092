CFG
---

;; Function main (main, funcdef_no=0, decl_uid=1703, cgraph_uid=0)

    main ()
   {
  	int j;
  	int i;
  	int sum;
  	int D.1983;

	<bb 2>:
  	sum = 0;
 	goto <bb 4>; [INV]

	<bb 3>:
  	sum = sum * 2;

	<bb 4>:
  	if (sum <= 99)
    	goto <bb 3>;[INV]
  	else
    	goto <bb 5>;[INV]

	<bb 5>:
  	i = 0;
  	goto <bb 10>;[INV]

	<bb 6>:
  	j = 0;
  	goto <bb 8>;[INV]

	<bb 7>:
	 _1 = i * j;
	  sum = _1 + sum;
	  j = j + 1;

	<bb 8>:
  	if (j <= 49)
    	goto <bb 7>;[INV]
  	else
  	goto <bb 9>;[INV]

	<bb 9>:
	i = i + 1;

	<bb 10>:
  	if (i <= 24)
    	goto <bb 6>;[INV]
  	else
    	goto <bb 11>;[INV]

	<bb 11>:
	D.1983=0;
	<bb 12>:
  <L9>:
    return D.1983=0; ;

  }



1.   Identify the basic blocks that correspond  to the while loop. How is
     the GIMPLE for a while loop different from simple if-else jumps?
Ans: <bb 2> and <bb 3> correspond to the while loop. <bb2> avoids executing an iteration
     unconditionally by having an unconditional goto to <bb4> which is the while
     loop conditional. This is different from the if-else jumps, which always seem
     to be conditional.

        
2.   Identify the  basic blocks  for the nested  for-loop. You  should be
     able  to identify  intializers, conditions  and increments  for each
     loop as  well as  the shared  inner body.  Is there  really anything
     special about a for-loop as compared to a while-loop?
Ans: Basic blocks for nested for loop are <bb5>, <bb6>, <bb7>, <bb8>, <bb9>, <bb10> and <bb11>.
     <bb5> and <bb6> are initializers.
     <bb8> and <bb10> are conditions.
     <bb7> and <bb9> contain increments.
     In for loops, intializing, conditions and incrementing are done in diferent blocks.
     Conditions use basic if-else statements.