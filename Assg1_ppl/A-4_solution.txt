-----------------------
A-4 Arrays and Pointers
----------------------
int main()                                                                                      |
{                                                                                               |;; Function main (main, funcdef_no=0, decl_uid=1907, cgraph_uid=1, symbol_order=0)
    int a[3];                                                                                   |
    int b[] = {1, 2, 3};                                                                        |;; 2 loops found
    int i, *p;                                                                                  |;;
    for (i=0; i<3; i++) {                                                                       |;; Loop 0
        a[i] = b[i];                                                                            |;;  header 0, latch 1
    }                                                                                           |;;  depth 0, outer -1
    p = a;                                                                                      |;;  nodes: 0 1 2 3 4 5 6
    *(p + 2) = 5;                                                                               |;;
}                                                                                               |;; Loop 1
                                                                                                |;;  header 4, latch 3
~                                                                                               |;;  depth 1, outer 0
~                                                                                               |;;  nodes: 4 3
~                                                                                               |;; 2 succs { 4 }
~                                                                                               |;; 3 succs { 4 }
~                                                                                               |;; 4 succs { 3 5 }
~                                                                                               |;; 5 succs { 6 }
~                                                                                               |;; 6 succs { 1 }
~                                                                                               |main ()
~                                                                                               |{
~                                                                                               |  int * p;
~                                                                                               |  int i;
~                                                                                               |  int b[3];
~                                                                                               |  int a[3];
~                                                                                               |  int D.1917;
~                                                                                               |
~                                                                                               |  <bb 2> :
~                                                                                               |  b[0] = 1;
~                                                                                               |  b[1] = 2;
~                                                                                               |  b[2] = 3;
~                                                                                               |  i = 0;
~                                                                                               |  goto <bb 4>; [INV]
~                                                                                               |
~                                                                                               |  <bb 3> :
~                                                                                               |  _1 = b[i];
~                                                                                               |  a[i] = _1;
~                                                                                               |  i = i + 1;
~                                                                                               |
~                                                                                               |  <bb 4> :
~                                                                                               |  if (i <= 2)
~                                                                                               |    goto <bb 3>; [INV]
~                                                                                               |  else
~                                                                                               |    goto <bb 5>; [INV]
~                                                                                               |
~                                                                                               |  <bb 5> :
~                                                                                               |
  												|   p = &a;
  												|  _2 = p + 8;
 												|   *_2 = 5;
												|   a = {CLOBBER};
								 				|   b = {CLOBBER};
												|   D.1917 = 0;
												|
 												|   <bb 6> :
												|   <L3>:
  												|   return D.1917;
												|   }
                               




 1.   How is array declaration and initialization handled?
 Ans: Just like  scalar initialization, it  is split from  the declaration
      and  included in  the procedure  body. In  the case  of arrays,  the
      initialization is split into  multiple statements that assign values
      to  individual array  elements. 
      int b[3];
      int a[3];
      <bb 2> :
       b[0] = 1;
       b[1] = 2;
       b[2] = 3;

 2.  Why does the statement a[i] = b[i] get broken down to two steps with
     an intermediate temporary?
 Ans: As GIMPLE  can perform only  one operation per statement,  it cannot
      read  and write  to  array  locations at  the  same  time. Thus,these 
      are  split into separate read and write statements by introducing a temporary.

 3.   Why are there CLOBBER statements at the end?
 Ans: CLOBBER statements are used for  address-escaped variables. It is an
      annotation  to  signify  that  the  scope  of  this  address-escaped
      variable has ended.
